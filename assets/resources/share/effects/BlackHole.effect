
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSpeed: 
            value: 2.0
          uScale: 
            value: 1.0
          uDistortion: 
            value: 1.0
          uHole: 
            value: 0.2
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uSpeed;
		float uScale;
		float uDistortion;
		float uHole;
	};

    vec2 c_UV0_main_4() {
	    return v_uv0;
	}
	vec4 c_BlackHole_hole_3(sampler2D tex, vec2 uv, float time) {
	    float radius = 0.5;
	    vec2 center = vec2(0.5, 0.5);
	    vec2 tc = uv - center;
	    float dist = length(tc);
	    if (dist < radius) {
	        float percent = (radius - dist) / radius;
	        float theta = percent * percent * (2.0 * sin(time)) * 8.0;
	        float s = sin(theta);
	        float c = cos(theta);
	        tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));
	    }
	    tc += center;
	    vec4 color = texture2D(tex, tc);
	    return color;
	}
	vec4 c_BlackHole_main_3(sampler2D Tex, vec2 UV, float Seed, float Speed, float Scale, float Distortion, float Hole) 
	{
	    Hole = Hole / 20.0;
	    vec2 uv = (UV - vec2(0.5)) * Scale;
	    float sinX = sin(Speed * Seed);
	    float cosX = cos(Speed * Seed);
	    float sinY = sinX;
	    mat2 rotationMatrix = mat2(cosX, -sinX, sinY, cosX);
	    uv *= rotationMatrix;
	    uv.xy += vec2(0.5, 0.5);
	    float dist = 1.0 - smoothstep(Hole, Hole + 0.15, length(vec2(0.5, 0.5) - uv));
	    float dista = 1.0 - smoothstep(0.25, 0.5, length(vec2(0.5, 0.5) - uv));
	    vec4 finalColor = c_BlackHole_hole_3(Tex, uv, Distortion);
	    finalColor.rgb *= 1.0 - dist;
	    finalColor.a *= dista*(1.0 - dist);
	    return finalColor;
	}
	    
	vec4 c_Output_main_1(vec4 Color) { 
	    return Color; 
	}
	void main()                                    
	{                                              
	    vec2 out_UV_UV0_4 = c_UV0_main_4();
	    vec4 out_Output_BlackHole_3 = c_BlackHole_main_3(texture, vec2(out_UV_UV0_4), cc_time[0], uSpeed, uScale, uDistortion, uHole);
	    gl_FragColor = c_Output_main_1(vec4(out_Output_BlackHole_3));
	}                                              
	
}%
        
{
  "ver": "1.0.25",
  "uuid": "2b8f204d-afaf-4630-95c4-bd651cd11636",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float speed;\nuniform float angularVelocity;\nuniform float u_amplitude_5;\nuniform float u_frequency_5;\nuniform float u_phaseX_5;\nuniform float u_phaseY_5;\nuniform float amplitude;\n  vec2 c_UV0_main_3() {\n    return v_uv0;\n}\nvec4 c_Split4_main_10(vec4 Input) {\n    return Input;\n}\nfloat c_Mul1_main_11(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Mul1_main_12(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_13(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nfloat c_Sine1_main_5(float Input) {\n    return u_amplitude_5 * sin(Input * u_frequency_5 + u_phaseX_5) + u_phaseY_5;\n}\nfloat c_Mul1_main_14(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_4(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_2To2_main_16(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nvec4 c_TextureToRGBA_main_15(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec2 out_UV_UV0_3 = c_UV0_main_3();\n    float out_x_UV0_3 = out_UV_UV0_3.x;\n    float out_y_UV0_3 = out_UV_UV0_3.y;\n    vec4 out_Output_Split4_10 = c_Split4_main_10(vec4(cc_time));\n    float out_x_Split4_10 = out_Output_Split4_10.x;\n    float out_Output_Mul1_11 = c_Mul1_main_11(speed, out_x_Split4_10);\n    float out_Output_Mul1_12 = c_Mul1_main_12(angularVelocity, out_x_UV0_3);\n    float out_Output_Add1_13 = c_Add1_main_13(out_Output_Mul1_12, out_Output_Mul1_11);\n    float out_Output_Sine1_5 = c_Sine1_main_5(out_Output_Add1_13);\n    float out_Output_Mul1_14 = c_Mul1_main_14(amplitude, out_Output_Sine1_5);\n    float out_Output_Add1_4 = c_Add1_main_4(out_Output_Mul1_14, out_y_UV0_3);\n    vec2 out_Output_2To2_16 = c_2To2_main_16(out_x_UV0_3, out_Output_Add1_4);\n    vec4 out_Color_TextureToRGBA_15 = c_TextureToRGBA_main_15(vec2(out_Output_2To2_16), texture);\n    gl_FragColor = c_Output_main_1(vec4(out_Color_TextureToRGBA_15));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float speed;\n  float angularVelocity;\n  float u_amplitude_5;\n  float u_frequency_5;\n  float u_phaseX_5;\n  float u_phaseY_5;\n  float amplitude;\n};\n  vec2 c_UV0_main_3() {\n    return v_uv0;\n}\nvec4 c_Split4_main_10(vec4 Input) {\n    return Input;\n}\nfloat c_Mul1_main_11(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Mul1_main_12(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_13(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nfloat c_Sine1_main_5(float Input) {\n    return u_amplitude_5 * sin(Input * u_frequency_5 + u_phaseX_5) + u_phaseY_5;\n}\nfloat c_Mul1_main_14(float InputA, float InputB) {\n    return (InputA * InputB);\n}\nfloat c_Add1_main_4(float InputA, float InputB) {\n    return (InputA + InputB);\n}\nvec2 c_2To2_main_16(float InputA, float InputB) {\n    return vec2(InputA, InputB);\n}\nvec4 c_TextureToRGBA_main_15(vec2 UV, sampler2D Texture) {\n    return texture2D(Texture, UV);\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec2 out_UV_UV0_3 = c_UV0_main_3();\n    float out_x_UV0_3 = out_UV_UV0_3.x;\n    float out_y_UV0_3 = out_UV_UV0_3.y;\n    vec4 out_Output_Split4_10 = c_Split4_main_10(vec4(cc_time));\n    float out_x_Split4_10 = out_Output_Split4_10.x;\n    float out_Output_Mul1_11 = c_Mul1_main_11(speed, out_x_Split4_10);\n    float out_Output_Mul1_12 = c_Mul1_main_12(angularVelocity, out_x_UV0_3);\n    float out_Output_Add1_13 = c_Add1_main_13(out_Output_Mul1_12, out_Output_Mul1_11);\n    float out_Output_Sine1_5 = c_Sine1_main_5(out_Output_Add1_13);\n    float out_Output_Mul1_14 = c_Mul1_main_14(amplitude, out_Output_Sine1_5);\n    float out_Output_Add1_4 = c_Add1_main_4(out_Output_Mul1_14, out_y_UV0_3);\n    vec2 out_Output_2To2_16 = c_2To2_main_16(out_x_UV0_3, out_Output_Add1_4);\n    vec4 out_Color_TextureToRGBA_15 = c_TextureToRGBA_main_15(vec2(out_Output_2To2_16), texture);\n    gl_FragColor = c_Output_main_1(vec4(out_Color_TextureToRGBA_15));\n}"
      }
    }
  ],
  "subMetas": {}
}
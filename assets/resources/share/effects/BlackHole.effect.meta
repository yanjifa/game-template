{
  "ver": "1.0.25",
  "uuid": "2e09f8ed-7f2e-4307-9fba-03975fe108b6",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uSpeed;\nuniform float uScale;\nuniform float uDistortion;\nuniform float uHole;\n  vec2 c_UV0_main_4() {\n    return v_uv0;\n}\nvec4 c_BlackHole_hole_3(sampler2D tex, vec2 uv, float time) {\n    float radius = 0.5;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 tc = uv - center;\n    float dist = length(tc);\n    if (dist < radius) {\n        float percent = (radius - dist) / radius;\n        float theta = percent * percent * (2.0 * sin(time)) * 8.0;\n        float s = sin(theta);\n        float c = cos(theta);\n        tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));\n    }\n    tc += center;\n    vec4 color = texture2D(tex, tc);\n    return color;\n}\nvec4 c_BlackHole_main_3(sampler2D Tex, vec2 UV, float Seed, float Speed, float Scale, float Distortion, float Hole)\n{\n    Hole = Hole / 20.0;\n    vec2 uv = (UV - vec2(0.5)) * Scale;\n    float sinX = sin(Speed * Seed);\n    float cosX = cos(Speed * Seed);\n    float sinY = sinX;\n    mat2 rotationMatrix = mat2(cosX, -sinX, sinY, cosX);\n    uv *= rotationMatrix;\n    uv.xy += vec2(0.5, 0.5);\n    float dist = 1.0 - smoothstep(Hole, Hole + 0.15, length(vec2(0.5, 0.5) - uv));\n    float dista = 1.0 - smoothstep(0.25, 0.5, length(vec2(0.5, 0.5) - uv));\n    vec4 finalColor = c_BlackHole_hole_3(Tex, uv, Distortion);\n    finalColor.rgb *= 1.0 - dist;\n    finalColor.a *= dista*(1.0 - dist);\n    return finalColor;\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec2 out_UV_UV0_4 = c_UV0_main_4();\n    vec4 out_Output_BlackHole_3 = c_BlackHole_main_3(texture, vec2(out_UV_UV0_4), cc_time[0], uSpeed, uScale, uDistortion, uHole);\n    gl_FragColor = c_Output_main_1(vec4(out_Output_BlackHole_3));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uSpeed;\n  float uScale;\n  float uDistortion;\n  float uHole;\n};\n  vec2 c_UV0_main_4() {\n    return v_uv0;\n}\nvec4 c_BlackHole_hole_3(sampler2D tex, vec2 uv, float time) {\n    float radius = 0.5;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 tc = uv - center;\n    float dist = length(tc);\n    if (dist < radius) {\n        float percent = (radius - dist) / radius;\n        float theta = percent * percent * (2.0 * sin(time)) * 8.0;\n        float s = sin(theta);\n        float c = cos(theta);\n        tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));\n    }\n    tc += center;\n    vec4 color = texture2D(tex, tc);\n    return color;\n}\nvec4 c_BlackHole_main_3(sampler2D Tex, vec2 UV, float Seed, float Speed, float Scale, float Distortion, float Hole)\n{\n    Hole = Hole / 20.0;\n    vec2 uv = (UV - vec2(0.5)) * Scale;\n    float sinX = sin(Speed * Seed);\n    float cosX = cos(Speed * Seed);\n    float sinY = sinX;\n    mat2 rotationMatrix = mat2(cosX, -sinX, sinY, cosX);\n    uv *= rotationMatrix;\n    uv.xy += vec2(0.5, 0.5);\n    float dist = 1.0 - smoothstep(Hole, Hole + 0.15, length(vec2(0.5, 0.5) - uv));\n    float dista = 1.0 - smoothstep(0.25, 0.5, length(vec2(0.5, 0.5) - uv));\n    vec4 finalColor = c_BlackHole_hole_3(Tex, uv, Distortion);\n    finalColor.rgb *= 1.0 - dist;\n    finalColor.a *= dista*(1.0 - dist);\n    return finalColor;\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec2 out_UV_UV0_4 = c_UV0_main_4();\n    vec4 out_Output_BlackHole_3 = c_BlackHole_main_3(texture, vec2(out_UV_UV0_4), cc_time[0], uSpeed, uScale, uDistortion, uHole);\n    gl_FragColor = c_Output_main_1(vec4(out_Output_BlackHole_3));\n}"
      }
    }
  ],
  "subMetas": {}
}